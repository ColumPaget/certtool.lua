function DrawHelp()
print("certtool.lua [action] [args]")
print()
print("certtool.lua list <path>                                     - list certificates in file at <path>")
print("certtool.lua show <path>                                     - show details of certificates in file at <path>")
print("certtool.lua bundle <path 1> ... <path n> -out <outpath>     - bundle certificates listed into a single filei at 'outpath'")
print("certtool.lua unbundle <path>                                 - unbundle certificates out of a single file into a file per certificate")
print("certtool.lua scrape <hostname>:<port>                        - connect to host and print/check certificates it offers")
print("certtool.lua pem2pfx <cert> <key>                            - connect to host and print/check certificates it offers")
print("certtool.lua pfx2pem <path>                                  - unpack pfx file at <path> into pem certificate and key files")
print("certtool.lua ca  <name> <certificate args>                   - create a certificate authority called <name> (if name is ommited ask for fields)")
print("certtool.lua csr <name> <certificate args>                   - create a signing request for a certificate with common-name <name> (if name is ommited ask for fields)")
print("certtool.lua cert <name> <certificate args>                  - create a certificate with common-name <name> (if name is ommited ask for fields)")
print("certtool.lua key <path>                                      - create public key at <path>")
print("certtool.lua --help                                          - this help")
print("certtool.lua -help                                           - this help")
print("certtool.lua -?                                              - this help")
print()
print("<certificate args> are a set of arguments describing the fields within a certificate, signing request or C.A. If none are specified, and no <name> argument is specified then an interactive query mode will be activated to ask for values. The only field that must have a value is 'name'. If interactive query mode is not desired then arguments can be specified on the command-line using:")
print()
print(" -days <n>                   days that certificate will be valid for")
print(" -org  <org name>            organization name")
print(" -location  <location>       location")
print(" -loc  <location>            location")
print(" -country <2-letter code>    2-letter country code")
print(" -cc <2-letter code>         2-letter country code")
print(" -email <address>            contact email address")
print(" -ca <C.A. name>             name of certificate authority to use")
print(" -copy                       copy details from certificate of signing C.A.")
print()
print("Examples:")
print()
print("Show certificate details")
print("  certtool.lua show ./server.crt")
print("Connect to service and output its certificate list")
print("  certtool.lua scrape myserver:443")
print("Bundle certificates into cert_bundle.pem")
print("  certtool.lua bundle -out cert_bundle.pem cert1.pem cert2.pem cert3.pem")
print("Unbundle certificates from cert_bundle.pem into seperate files")
print("  certtool.lua unbundle cert_bundle.pem")
print("Create a certificate authority in interactive mode (asks for needed info)")
print("  certtool.lua ca")
print("Create a certificate authority called 'myCA' with org and email fields set")
print("  certtool.lua ca myCA -org 'My Company' -email webmaster@my.com")
print("Create a certificate signing request in interactive mode")
print("  certtool.lua csr")
print("Create a certificate signing request (to be signed by another CA) for a certificate called 'server_cert'")
print("  certtool.lua csr server_cert")
print("Create a certificate in interactive mode")
print("  certtool.lua cert")
print("Create a certificate called 'server_cert' using C.A. 'myCA'")
print("  certtool.lua cert server_cert -ca myCA")
print("Pack key and certificate into pfx/pkcs12 file")
print("  certtool.lua pem2pfx server_cert.pfx server_cert.crt server_cert.key")
print("Unpack key and certificate from pfx/pkcs12 file")
print("  certtool.lua pfx2pem ./server_cert.pfx")

end

